import * as React from 'react';
import './ultimate_tic_tac_toe.css';

import Game from './game'
import { SmallBoard, TicTacToe } from './small_board';
import { runGame, Board, MonteCarloTreeSearch } from './miniGame'


const mcts = new MonteCarloTreeSearch()

const PLAYER_HUMAN = 'human'
const PLAYER_BOT_0 = 'bot_level_zero'
const PLAYER_BOT_1 = 'bot_level_one'
const PLAYER_BOT_2 = 'bot_level_two'
const PLAYER_BOT_MIST = 'ai_mist'


const botSkills = {
  [PLAYER_BOT_0]: 0,
  [PLAYER_BOT_1]: 1,
  [PLAYER_BOT_2]: 2,
}

let game = new Game()

// class UltimateTicTacToe extends React.Component {

//   constructor(props) {
//     super(props)

//     this.state = {
//       board: game.getBoard(),
//       turn: game.getPlayerTurn(),
//       unlockedBoard: game.getUnlockedBoard(),
//       wonBoards: game.getWonBoards(),
//       playerOneWins: 0,
//       playerTwoWins: 0,
//       moveCount: 0
//     }
//   }

//   componentDidMount(){
//     const { playerOne } = this.props

//     if (playerOne !== PLAYER_HUMAN) {
//       this.runBot(playerOne)
//     }
//   }

//   runBot = (botType) => {
//     if (!game.isGameOver()) {
//       const moves = game.getMoves()
//       const move = game.getMoveFromBot({ skill: botSkills[botType] })
//       this.handlePlayerMove(move)
//     }
//   }

//   handlePlayerMove = (cellIndex) => {
//     game.move(cellIndex)

//     this.setState({
//       board: game.getBoard(),
//       turn: game.getPlayerTurn(),
//       unlockedBoard: game.getUnlockedBoard(),
//       wonBoards: game.getWonBoards(),
//       moveCount: game.getMoveCount()
//     })
//   }

//   componentDidUpdate(prevProps, prevState){
//     if (!game.isGameOver() || this.state.moveCount === 0) {
//       if (this.state.turn === 1 && this.props.playerOne !== PLAYER_HUMAN) {
//         setTimeout(() => this.runBot(this.props.playerOne), this.props.moveDelay)
//       } else if (this.state.turn === 2 && this.props.playerTwo !== PLAYER_HUMAN) {
//         setTimeout(() => this.runBot(this.props.playerTwo), this.props.moveDelay)
//       }
//     } else if (game.isGameOver()) {
//       if (this.props.loopGame === true) {
//         const winner = game.getWinningPlayer()
//         game = new Game()

//         if (winner === 1) {
//           console.log('player 1 to 2 win ratio: ', this.state.playerOneWins + 1, this.state.playerTwoWins)
//           this.setState({ playerOneWins: this.state.playerOneWins + 1, moveCount: 0 })
//         } else if (winner === 2) { 
//           console.log('player 1 to 2 win ratio: ', this.state.playerOneWins, this.state.playerTwoWins + 1)
//           this.setState({ playerTwoWins: this.state.playerTwoWins + 1, moveCount: 0})
//         } else {
//           this.setState({ moveCount: 0 })
//         }
//       }
//     }
//   }

//   render() {
//     const { board, unlockedBoard, wonBoards } = this.state

//     return (
//       <div className="App">
//         <div className="megaTictactoeBoard">
//           {[0, 1, 2, 3, 4, 5, 6, 7, 8].map(
//             (i) => <SmallBoard
//               key={i}
//               boardIndex={i}
//               onClick={this.handlePlayerMove}
//               board={board}
//               unlocked={unlockedBoard === i || unlockedBoard === -1}
//               won={wonBoards[i]}
//             />
//           )}
//         </div>
//       </div>
//     );
//   }
// }
function flattenNestedArrays(arr) {
  return [].concat.apply([], arr);
}

class UltimateTicTacToe extends React.Component {

  constructor(props) {
    super(props)

    const defaultBoard = new Board()
    this.state = {
      board: defaultBoard,
      player: 1,
      unlockedBoard: defaultBoard.unlockedBoardCell,
      wonBoards: flattenNestedArrays(defaultBoard.wonBoards),
      playerOneWins: 0,
      playerTwoWins: 0,
      moveCount: 0
    }
  }

  componentDidMount() {
    const { playerOne } = this.props

    if (playerOne !== PLAYER_HUMAN) {
      this.runBot(playerOne)
    }
  }

  runBot = (botType) => {
    if (botType !== PLAYER_BOT_MIST) {
      const { board, player, unlockedBoard, wonBoards } = this.state
      console.log('running wrong bot!')
      game = new Game({board: board.boardValues, turn: player, unlockedBoard, wonBoards})
      if (game.isGameOver()) return

      const moves = game.getMoves()
      const move = game.getMoveFromBot({ skill: botSkills[botType] })
      this.handlePlayerMove(move)
    } else {
      const { board, player } = this.state
      console.log('running correct bot')
      const newBoard = mcts.findNextMove(board, player)

      this.setState({
        player: 3 - player,
        board: newBoard,
        unlockedBoard: newBoard.unlockedBoardCell,
        wonBoards: flattenNestedArrays(newBoard.wonBoards),
        moveCount: this.state.moveCount + 1
      })
    }
  }

  handlePlayerMove = (index) => {
    const { board, player } = this.state

    board.performMove(player, index)

    this.setState({
      player: 3 - player,
      unlockedBoard: board.unlockedBoardCell,
      wonBoards: flattenNestedArrays(board.wonBoards),
      moveCount: this.state.moveCount + 1
    })
  }

  componentDidUpdate(prevProps, prevState) {
    const gameOver = this.state.board.checkStatus() !== -1
    if (!gameOver || this.state.moveCount === 0) {
      if (this.state.player === 1 && this.props.playerOne !== PLAYER_HUMAN) {
        setTimeout(() => this.runBot(this.props.playerOne), this.props.moveDelay)
      } else if (this.state.player === 2 && this.props.playerTwo !== PLAYER_HUMAN) {
        setTimeout(() => this.runBot(this.props.playerTwo), this.props.moveDelay)
      }
    } else if (gameOver) {
      if (this.props.loopGame === true) {
        const winner = game.getWinningPlayer()
        game = new Game()

        if (winner === 1) {
          console.log('player 1 to 2 win ratio: ', this.state.playerOneWins + 1, this.state.playerTwoWins)
          this.setState({ playerOneWins: this.state.playerOneWins + 1, moveCount: 0 })
        } else if (winner === 2) {
          console.log('player 1 to 2 win ratio: ', this.state.playerOneWins, this.state.playerTwoWins + 1)
          this.setState({ playerTwoWins: this.state.playerTwoWins + 1, moveCount: 0 })
        } else {
          this.setState({ moveCount: 0 })
        }
      }
    }
  }

  render() {
    const { board, unlockedBoard, wonBoards } = this.state
    return (
      <div className="App">
        <div className="megaTictactoeBoard">
          {[0, 1, 2, 3, 4, 5, 6, 7, 8].map(
            (i) => <SmallBoard
              key={i}
              boardIndex={i}
              onClick={this.handlePlayerMove}
              board={board.boardValues}
              unlocked={unlockedBoard === i || unlockedBoard === -1}
              won={wonBoards[i]}
            />
          )}
        </div>
      </div>
    );
  }
}


UltimateTicTacToe.defaultProps = {
  playerOne: PLAYER_HUMAN,
  playerTwo: PLAYER_HUMAN,
  loopGame: false,
  moveDelay: 1000
}


export { UltimateTicTacToe, Game, SmallBoard, TicTacToe }
