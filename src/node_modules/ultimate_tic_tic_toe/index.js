import * as React from 'react';
import './ultimate_tic_tac_toe.css';

import Game from './game'
import { runGame } from './miniGame'
import { SmallBoard, TicTacToe } from './small_board';


const PLAYER_HUMAN = 'human'
const PLAYER_BOT_0 = 'bot_level_zero'
const PLAYER_BOT_1 = 'bot_level_one'
const PLAYER_BOT_2 = 'bot_level_two'

const botSkills = {
  [PLAYER_BOT_0] : 0,
  [PLAYER_BOT_1] : 1,
  [PLAYER_BOT_2] : 2
}

let game = new Game()

class UltimateTicTacToe extends React.Component {

  constructor(props) {
    super(props)

    this.state = {
      board: game.getBoard(),
      turn: game.getPlayerTurn(),
      unlockedBoard: game.getUnlockedBoard(),
      wonBoards: game.getWonBoards(),
      playerOneWins: 0,
      playerTwoWins: 0,
      moveCount: 0
    }

    // runGame()
  }

  componentDidMount(){
    const { playerOne } = this.props

    if (playerOne !== PLAYER_HUMAN) {
      this.runBot(playerOne)
    }
  }

  runBot = (botType) => {
    if (!game.isGameOver()) {
      const moves = game.getMoves()
      const move = game.getMoveFromBot({ skill: botSkills[botType] })
      this.handlePlayerMove(move)
    }
  }

  handlePlayerMove = (cellIndex) => {
    game.move(cellIndex)

    this.setState({
      board: game.getBoard(),
      turn: game.getPlayerTurn(),
      unlockedBoard: game.getUnlockedBoard(),
      wonBoards: game.getWonBoards(),
      moveCount: game.getMoveCount()
    })
  }

  componentDidUpdate(prevProps, prevState){
    if (!game.isGameOver() || this.state.moveCount === 0) {
      if (this.state.turn === 1 && this.props.playerOne !== PLAYER_HUMAN) {
        setTimeout(() => this.runBot(this.props.playerOne), this.props.moveDelay)
      } else if (this.state.turn === 2 && this.props.playerTwo !== PLAYER_HUMAN) {
        setTimeout(() => this.runBot(this.props.playerTwo), this.props.moveDelay)
      }
    } else if (game.isGameOver()) {
      if (this.props.loopGame === true) {
        const winner = game.getWinningPlayer()
        game = new Game()

        if (winner === 1) {
          console.log('player 1 to 2 win ratio: ', this.state.playerOneWins + 1, this.state.playerTwoWins)
          this.setState({ playerOneWins: this.state.playerOneWins + 1, moveCount: 0 })
        } else if (winner === 2) { 
          console.log('player 1 to 2 win ratio: ', this.state.playerOneWins, this.state.playerTwoWins + 1)
          this.setState({ playerTwoWins: this.state.playerTwoWins + 1, moveCount: 0})
        } else {
          this.setState({ moveCount: 0 })
        }
      }
    }
  }

  render() {
    const { board, unlockedBoard, wonBoards } = this.state

    return (
      <div className="App">
        <div className="megaTictactoeBoard">
          {[0, 1, 2, 3, 4, 5, 6, 7, 8].map(
            (i) => <SmallBoard
              key={i}
              boardIndex={i}
              onClick={this.handlePlayerMove}
              board={board}
              unlocked={unlockedBoard === i || unlockedBoard === -1}
              won={wonBoards[i]}
            />
          )}
        </div>
      </div>
    );
  }
}

UltimateTicTacToe.defaultProps = {
  playerOne: PLAYER_HUMAN,
  playerTwo: PLAYER_HUMAN,
  loopGame: false,
  moveDelay: 1000
}


export { UltimateTicTacToe, Game, SmallBoard, TicTacToe }
