import * as React from 'react';
import { runGame, Board, Position, MonteCarloTreeSearch } from './miniGame'

const mcts = new MonteCarloTreeSearch()

const renderCells = ({ onClick, boardIndex = 0, board = [], unlocked, won = false }) => {
  return [0, 1, 2, 3, 4, 5, 6, 7, 8].map((i) => {
    const cellIndex = boardIndex * 9 + i
    const clickable = board[cellIndex] === 0 && unlocked && !won

    return (
      <div
        className="cell"
        data-player={board[cellIndex]}
        data-clickable={clickable}
        data-won={won}
        key={i}
        onClick={() => clickable ? onClick(cellIndex) : null}
      />
    )
  })
}


const SmallBoard = (props = {}) => {
  const { unlocked, won } = props

  return (
    <div className="tictactoeBoard" data-unlocked={unlocked} data-won={won}>
      {renderCells(props)}
    </div>
  );
}


class TicTacToe extends React.PureComponent {

  constructor(props) {
    super(props)

    this.state = {
      board: new Board(),
      player: 1,
      formattedBoard: [0,0,0,0,0,0,0,0,0]
    }
  }

  handleOnClick = (index) => {
    const { board, player } = this.state
    const position = new Position(Math.floor(index / 3), index % 3)

    board.performMove(player, position)
    const formattedBoard = [].concat.apply([], board.boardValues)

    this.setState({ 
      player: 3 - player,
      formattedBoard
    })
  }

  runBot = () => {
    const { board, player } = this.state

    const newBoard = mcts.findNextMove(board, player)
    const formattedBoard = [].concat.apply([], newBoard.boardValues)

    this.setState({
      player: 3 - player,
      board: newBoard,
      formattedBoard
    })
  }

  componentDidUpdate(prevProps, prevState){
    if (this.state.board.checkStatus() === -1 && prevState.player === 1 && this.state.player === 2) {
      this.runBot()
    } else if (this.state.board.checkStatus() !== -1){
      this.setState({
        board: new Board(),
        player: prevState.player,
        formattedBoard: [0,0,0,0,0,0,0,0,0]
      })
    }
  }

  render() {
    return <SmallBoard
      won={false}
      boardIndex={0}
      unlocked={true}
      onClick={this.handleOnClick}
      board={this.state.formattedBoard}
    />
  }
}


export {
  SmallBoard,
  TicTacToe
}
